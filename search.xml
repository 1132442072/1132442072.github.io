<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[听说BAT面试就考这些？(1.1)]]></title>
    <url>%2F2019%2F05%2F24%2F%E5%90%AC%E8%AF%B4BAT%E9%9D%A2%E8%AF%95%E5%B0%B1%E8%80%83%E8%BF%99%E4%BA%9B%EF%BC%9F-1-1%2F</url>
    <content type="text"><![CDATA[java面试题（1.1）HashMap，Hashtable，ConcurrentHashMap最近正好在看这方面的内容，所以就把这个就当作系列开篇的第一个吧，这也是面试常考的数据结构 经典问题如下： 简单介绍一下HashMap HashMap与Hashtable的区别 HashMap在jdk7和jdk8中的区别 HashMap与ConcurrentHashMap的区别 不管是笔试还是面试，只要面java相关的工作基本上大概率都会问这些问题，所以很重要，接下来就针对这几个问题来看一下这些数据结构设计的原理和源码。 HashMapHashMap的介绍 父类：AbstractMap 类型参数：HashMap&lt;K,V&gt; ​ K - 此映射所维护的键的类型 ​ V - 所映射键值的类型 已实现接口：Serializable，Cloneable，Map&lt;K,V&gt; 直接子类：LinkedHashMap, PrinterStateReasons 构造函数12345678910111213141516171819202122232425public HashMap() &#123; this.loadFactor = DEFAULT_LOAD_FACTOR;&#125;public HashMap(int initialCapacity) &#123; this(initialCapacity, DEFAULT_LOAD_FACTOR);&#125;public HashMap(int initialCapacity, float loadFactor) &#123; if (initialCapacity &lt; 0) throw new IllegalArgumentException("Illegal initial capacity: " + initialCapacity); if (initialCapacity &gt; MAXIMUM_CAPACITY) initialCapacity = MAXIMUM_CAPACITY; if (loadFactor &lt;= 0 || Float.isNaN(loadFactor)) throw new IllegalArgumentException("Illegal load factor: " + loadFactor); this.loadFactor = loadFactor; this.threshold = tableSizeFor(initialCapacity);&#125;public HashMap(Map&lt;? extends K, ? extends V&gt; m) &#123; this.loadFactor = DEFAULT_LOAD_FACTOR; putMapEntries(m, false);&#125; 看初始化的源码，初始化的过程中其中有一些常量，让我们把它找出来 DEFAULT_LOAD_FACTOR（默认加载因子） MAXIMUM_CAPACITY（最大容量） 123456789101112/*** The load factor used when none specified in constructor.* 如果没在构造器中定义加载因子，那么这个就为默认*/static final float DEFAULT_LOAD_FACTOR = 0.75f;/*** The maximum capacity, used if a higher value is implicitly specified* by either of the constructors with arguments.* MUST be a power of two &lt;= 1&lt;&lt;30.* 容量的极限值，如果初始化时的容量高于此值，那么强制容量为此值*/static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30; 附加部分 &lt;&lt; 此符号为java的左移运算符 1 &lt;&lt; x 等同于 2 ^ x 所以这里HashMap的最大容量为 2 ^ 30 其中我们可以看到构造器中是可以自定义初始化的容量大小的，但是在默认的无参构造器中并没有定义初始容量， 只定义了默认的加载因子，那么在我使用无参构造的函数时初始的容量为多少呢？我们来看源码发现有这样一个常 量 DEFAULT_INITIAL_CAPACITY（默认初始容量） 12345/*** The default initial capacity - MUST be a power of two.* 默认的初始容量 — 此值必须是2的幂*/static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16 默认的初始容量为16，我们看到这里的源码注释中有一个条件，容量的值必须为2的幂 123456789static final int tableSizeFor(int cap) &#123; int n = cap - 1; n |= n &gt;&gt;&gt; 1; n |= n &gt;&gt;&gt; 2; n |= n &gt;&gt;&gt; 4; n |= n &gt;&gt;&gt; 8; n |= n &gt;&gt;&gt; 16; return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;&#125; 在自定义的初始容量这里我们看有个方法也做了相应的处理，保证容量为2的次幂。 为什么容量必须是2的次幂呢？？这就涉及了接下来的问题，HashMap的结构 HashMap的结构HashMap的底层结构实现是由数组加链表结构实现的，也就是数组的每一个元素内为一个完整的链表结构，数组 元素中存储的是链表的头 当存入元素时会对存入的Key值进行Hash找出它在数组中所对应的位置，如果要对Key值进行Hash的话就会难免 有冲突，也就是不同的Key在进行Hash时Hash值相同的时候，当这种情况出现时，底层就会拿着这个Key的Value 去和相同Hash链表里的元素值进行equal操作，如果发现值相等就会替换掉当前存储的值，如果链表中没有相等值 的话那么就会对这个链表进行扩容，也就是将这个新元素插入进去。 为什么HashMap的容量必须为2的次幂呢？在源码的putVal方法中，我们可以看到底层是这样计算Key应该存放在数组的什么位置的 12//容量值-1在与上hash值tab[(n - 1) &amp; hash] 所以让我们来举个例子，容量为2的次幂时和相反时的区别 假设HashMap的容量为16，转化成二进制为10000，n-1得出的二进制为1111 哈希值为1111和1110的话 ，按照上面的公式 可以算出1111索引为15，1110索引为14 那么假设HashMap的容量为15的话，此时不是2的次幂，转化二进制为01111，n-1得出的二进制为1110 哈希值为1111和1110的话，按照上面的公式 可以算出1111索引为14，1110索引也为14，产生了hash冲突，就代表会浪费内存空间，链表就会变长，增加查询的时间，减慢效率 所以为什么HashMap的容量设计必须为2的次幂呢 1.减少Hash冲突的几率 2.(n - 1) &amp; hash，当n为2次幂时，会满足(n - 1) &amp; hash = hash % n HashMap的扩容为什么要进行扩容呢？ 因为当存入的K-V值越来越多时，难免会产生大量的Hash冲突，这会导致数组后的链表越来越长，导致查询效率大 量降低最大为o(N)，所以为了避免这种情况产生，当存入的元素大于一定的条件时，整个数据结构需要进行扩容。 HashMap的扩容的时机 说到时机就不得不说两个参数，容量和扩容因子 而且一定是存放元素时元素个数满足条件时产生扩容时机，所以来看一下put过程的源码 12345678910111213141516171819public V put(K key, V value) &#123; if (key == null) return putForNullKey(value); int hash = hash(key); int i = indexFor(hash, table.length); for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123; Object k; if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123; V oldValue = e.value; e.value = value; e.recordAccess(this); return oldValue; &#125; &#125; modCount++; addEntry(hash, key, value, i); return null;&#125; 1.先判断存入的key值是否为null，如果为null直接存入以null为key的值 2.计算存入key的hash值 HashMap是一个散列表，存储的内容为键值对类型（k-v） 默认容量大小为16，默认加载因子为0.75，最大容量为2^30 允许键和键值为null，不保证映射的顺序，特别是它不保证该顺序恒久不变。 HashMap的实现不是同步的，使用时会产生线程安全问题，非线程安全的映射 Hashtable HashTable中不允许键值保存为null 默认容量大小为11，默认加载因子为0.75，最大容量为2^30 HashTable是同步的，所有的读写等操作都进行了Synchronized锁保护，当有读写操作时锁住整个结构，所以此数据结构是线程安全的映射。但是锁保护的代价也相当巨大，会对读写的效率产生较大影响。 HashMap的迭代器（Iterator）是快速失败的迭代器，但是Hashtable的迭代器（enumerator）不是快速失败的。如果有其它线程对HashMap进行的添加/删除元素，将会抛出ConcurrentModificationException（并发修改异常），所以需要使用迭代器本身的remove方法。 ConcurrentHashMap]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java面试题</tag>
        <tag>HashMap</tag>
        <tag>Hashtable</tag>
        <tag>ConcurrentHashMap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[听说BAT面试就考这些？(开篇)]]></title>
    <url>%2F2019%2F05%2F23%2F%E5%90%AC%E8%AF%B4BAT%E9%9D%A2%E8%AF%95%E5%B0%B1%E8%80%83%E8%BF%99%E4%BA%9B%EF%BC%9F(%E5%BC%80%E7%AF%87)%2F</url>
    <content type="text"><![CDATA[听说BAT面试就考这些？有一段时间没来这里了，今天开一个新坑，面试系列来了，这是一个边学习边记录的系列，在各家互联网大厂招人越来越严谨，注重技术基础的情形下，整理一些面试常考注重的问题及解答 所有的问题及回答都是技术方面的，这里不涉及一些非技术性及HR面的问题 主要分为以下几个方面 java面试题 算法面试题 计算机网络与操作系统面试题 数据库面试题 互联网开发面试题 注意文章涉及面试问题均为个人网上搜寻整理的一线互联网公司常见的面试题，偏向于校招的应届生 所有的面试问题解答均为个人学习过程中的总结，如想一起交流或者对文章进行指错可以点击左侧的联系方式与我交流联系，非常欢迎也很希望能和人一起进步和学习]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[企业级限流的几种技术]]></title>
    <url>%2F2019%2F04%2F01%2F%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%99%90%E6%B5%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%8A%80%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[限流的概念限流：限制流量，限流可以理解为服务降级的一种，限流就是限制系统的输入和输出流量已达到保护系统的目的，一般情况来说系统的吞吐量都是可以被测算的，为了保护系统的稳定运行，一旦达到的需要限制的阈值，就需要限制流量并采取一些措施以完成限制流量的目的 比如：延迟处理，拒绝处理，或者拒绝部分处理等等 企业级限流的几种技术1.手动实现负载均衡给用户提供选择，让用户访问主动访问不同的服务器达到负载均衡 常见场景：下载软件（联通线路，电信线路，普通下载，高速下载） 2.验证码限流强行减少用户访问的速度，达到一定程度的限流 常见场景：如早期12306的验证码 3.容器限流常见的web容器也可以设置容器的配置来进行限流 常见场景:以Tomcat为例 acceptCount：如果Tomcat的线程都忙于相应，那么接下来新来的连接都会进入队列排队，如果超出排队大小则拒绝连接 maxConnections：瞬时的最大连接数，超出的会进入队列进行等待 maxThreads：Tomcat能用来处理请求的最大的线程数，如果请求的处理量一直高于此值，则容器可能会僵死 4.限制总资源数如果有的资源为稀缺资源（数据库的连接，线程），并且多个请求可能同时去使用，那么需要去限制应用 常见场景：数据库连接池，线程池等等池化技术 比如给这个应用分配的连接数为100，那么本应用最多可以使用100个资源，超出的进入等待或者直接抛出异常 5.限制某个接口的总并发如果接口可能会有突发访问的情况，但又担心访问量太大造成服务崩溃，如抢购业务，这个时候就可以通过限制接口的总并发请求量，来解决问题 常见场景：因为是细粒度的操作，所以可以为每一个接口设置阈值，可以使用java的AtomicLong进行限流 12345678try&#123; if（atomic.incrementAndGet&gt;阈值）&#123; 拒绝请求； &#125; 处理请求；&#125;finally&#123; Atomic.decrementAndGet（）；&#125; 6.Nginx进行限流Nginx的负载均衡，Nginx提供了ngx_http_limit_req_module模块进行流量控制 7.使用消息队列通过消息队列，把每一个请求放入队列，通过人为设置控制来进行限流 常见的消息队列：rabbitMQ，activeMQ，RocketMQ，kafka等… 8.使用Netfix的Hystrix来进行限流Netflix Hystrix是SOA/微服务架构中提供服务隔离、熔断、降级机制的工具/框架。Netflix Hystrix是断路器的一种实现，用于高微服务架构的可用性，是防止服务出现雪崩的利器。 9.使用Guava来进行限流Guava是一个由Google开发的一个基于Java类库集合的拓展项目，包括collections，caching，primitives support，cocurrency libraries，common annotations，string processing，I/O等等，这些高质量的API可以使你的java代码更简洁，更加优雅，让你的工作轻松愉悦 通过限流算法：漏桶算法或令牌桶算法]]></content>
      <categories>
        <category>限流</category>
      </categories>
      <tags>
        <tag>限流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[这几天]]></title>
    <url>%2F2019%2F03%2F31%2F%E8%BF%99%E5%87%A0%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[这几天都干啥了这几天一直在看互联网架构，因为周一要面试，从B站找了网上的课程，B站现在真是个学习圣地哈哈哈，啥都有，在我心中仅次于网易云课堂 学习内容主要是了解了BAT,TMD大型互联网企业的基本架构，明白了不仅仅应该要学会使用，这些框架底层的实现基础才是计算机技术中的重中之重，也是真正值钱的部分，所以准备接下来啃一下Spring，SpringMVC的部分源码，感觉学习之路真是越来越长了，要加油！ 然后在LeetCode上刷了不少题，上一下战绩 大多都是简单难度的题，有几道中等难度的题（简单难度的晋升题），刷题的过程学到了很多，看大家的解题代码，可以看到不同的解题思路，也加深了对数据结构的理解。 以后准备至少一天刷一道，提升自己的能力，看看也能不能也参加一下赛事啥的（立下Flag） 接下来的计划希望周一的面试能顺利！然后去学习源码，好好提升自己！]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>记录生活</tag>
        <tag>LeetCode</tag>
        <tag>...</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello,World]]></title>
    <url>%2F2019%2F03%2F28%2FHello-World%2F</url>
    <content type="text"><![CDATA[为什么要搭建博客因为希望有一个属于自己的空间，记录自己的学习历程以及生活，培养学习时留下记录的好习惯，把学习的东西可以分类归档以便查找，也提升一下自己糟糕的文笔 博客搭建使用Github + Hexo搭建，一步一步的照着网上的教程来的，这里要感谢知乎，csdn，简书上那些写教程的大神，搭建过程很快速，而且有很多的主题可以选择，本博客使用的是next主题 由于next的版本更新，而网上的教程都比较老，搭建过程中也遇见了不少坑，所以准备以后自己也写一个搭建hexo next主题的博客以及怎么来优化的教程，也当一回大佬哈哈哈（立下flag） 文章编辑因为要用markdown格式来写博客（第一次接触这种格式…），所以就上网学习了一下，markdown作为轻量级的标记语言，还是很好上手的，但是不能用文本文档写不是，所以最后找到了这一款markdown编辑器Typora Typora这款软件界面简洁，有很多的快捷键，功能也比较全，有高级编辑模式可以自定义文档的格式（虽然现在没弄懂），很强大的编辑器，写markdown格式的文件非常好用，新手用起来毫不费力，向大家推荐 最后总结写这么点儿字写了快半小时，作为一名理工男，感觉自己写文章的时候总是不知道该写什么，大脑一片空白，希望能在以后记录学习过程时能把文笔提升起来，升级成一名能用键盘静能写文章，动能敲代码的好青年]]></content>
      <categories>
        <category>Hello,World</category>
      </categories>
      <tags>
        <tag>HelloWorld</tag>
      </tags>
  </entry>
</search>
